---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import ProductCard from '../components/ProductCard.astro';
import HowToBuyModal from '../components/HowToBuyModal.astro';
import Footer from '../components/Footer.astro';

// 1. Define la URL de tu panel de Strapi en Render
const strapiUrl = 'https://backend-dospatitas.onrender.com';

let products = [];
try {
  // 2. Llama a la API de Strapi para obtener la lista de productos
  // 'populate=*' es MUY importante para que se incluyan las imágenes
  const response = await fetch(`${strapiUrl}/api/products?populate=*`);
  if (response.ok) {
    const data = await response.json();
    products = data.data; // Los productos están en la propiedad 'data'
  } else {
    console.error('Error al obtener productos:', response.statusText);
  }
} catch (error) {
  console.error('Error de conexión:', error);
}
---

<Layout title="Dos Patitas - Tienda Online">
  <Header />
  <main>
    <Hero />

    <section class="featured-products container">
      <h2>Destacados de nuestra tienda</h2>
      <div class="product-grid">
        {products.length > 0 ? (
          products.map(product => {
            // Extraemos los datos de cada producto
            const { nombre, categoria } = product.attributes;
            // Aseguramos que haya al menos una imagen antes de intentar mostrarla
            const firstImage = product.attributes.imagenes.data?.[0];
            const imageUrl = firstImage ? `${strapiUrl}${firstImage.attributes.url}` : '/images/placeholder.png'; // <-- Pon una imagen de respaldo

            return (
              <ProductCard
                imgSrc={imageUrl}
                category={categoria}
                title={nombre}
                price="" 
              />
            );
          })
        ) : (
          <p>No hay productos para mostrar en este momento.</p>
        )}
      </div>
    </section>
  </main>
  
  <Footer />

  <HowToBuyModal />
</Layout>

<style>
  /* Tus estilos se mantienen exactamente igual */
  .featured-products {
    text-align: center;
    padding-top: 3rem;
    padding-bottom: 3rem;
  }
  .featured-products h2 {
    font-size: 2rem;
    margin-bottom: 2rem;
  }
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
  }
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
</style>

<script>
  // Tu script para el modal se mantiene exactamente igual
  const openModalButtons = document.querySelectorAll('[data-open-modal]');
  const closeModalButtons = document.querySelectorAll('[data-close-modal]');

  openModalButtons.forEach(button => {
    button.addEventListener('click', () => {
      const modalId = button.dataset.openModal;
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('is-open');
      }
    });
  });

  closeModalButtons.forEach(button => {
    button.addEventListener('click', () => {
      const modal = button.closest('[data-modal]');
      if (modal) {
        modal.classList.remove('is-open');
      }
    });
  });
  
  document.addEventListener('click', event => {
    if (event.target.matches('[data-modal]')) {
      event.target.classList.remove('is-open');
    }
  });
</script>