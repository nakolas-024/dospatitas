---
export interface CartItem {
  name: string;
  price?: string;
  quantity: number;
  imgSrc?: string;
}

// Inicializamos el carrito desde localStorage si existe
let cart: CartItem[] = [];
if (typeof window !== 'undefined') {
  const stored = localStorage.getItem('cart');
  if (stored) cart = JSON.parse(stored);
}

// Función para guardar en localStorage
const saveCart = () => {
  localStorage.setItem('cart', JSON.stringify(cart));
};

// Manejar agregar producto
const addToCart = (item: CartItem) => {
  const index = cart.findIndex(i => i.name === item.name);
  if (index > -1) {
    cart[index].quantity += item.quantity;
  } else {
    cart.push(item);
  }
  saveCart();
};

// Manejar eliminar producto
const removeFromCart = (index: number) => {
  cart.splice(index, 1);
  saveCart();
};
---

<div class="cart-container">
  <h3>Carrito</h3>
  {cart.length === 0 ? (
    <p class="empty-msg">Tu carrito está vacío.</p>
  ) : (
    <ul class="cart-list">
      {cart.map((item, index) => (
        <li class="cart-item">
          {item.imgSrc && <img src={item.imgSrc} alt={item.name} />}
          <div class="item-info">
            <span class="item-name">{item.name}</span>
            {item.price && <span class="item-price">{item.price}</span>}
            <span class="item-qty">x{item.quantity}</span>
          </div>
          <button
            class="delete-item"
            on:click={() => {
              removeFromCart(index);
            }}
            aria-label="Eliminar producto"
          >
            ×
          </button>
        </li>
      ))}
    </ul>
  )}
</div>

<style>
.cart-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 300px;
  max-height: 80vh;
  background-color: #fff;
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0,0,0,.15);
  padding: 1rem;
  overflow-y: auto;
  z-index: 1000;
  font-family: var(--font-primary);
}
.cart-container h3 {
  margin: 0 0 1rem;
  font-size: 1.2rem;
  font-weight: 700;
  text-align: center;
}
.cart-list {
  list-style: none;
  padding: 0;
  margin: 0;
}
.cart-item {
  display: flex;
  align-items: center;
  margin-bottom: 0.75rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #eee;
}
.cart-item img {
  width: 50px;
  height: 50px;
  object-fit: cover;
  border-radius: 6px;
  margin-right: 0.75rem;
}
.item-info {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}
.item-name {
  font-weight: 600;
  font-size: 0.95rem;
}
.item-price,
.item-qty {
  font-size: 0.85rem;
  color: #555;
}
.delete-item {
  background: none;
  border: none;
  color: #c23b63;
  font-size: 1.2rem;
  cursor: pointer;
  padding: 0 0.25rem;
}
.empty-msg {
  text-align: center;
  color: #777;
  font-size: 0.95rem;
}
</style>

<script>
document.addEventListener('addToCart', (e) => {
  addToCart({ ...e.detail, quantity: 1 });
});
</script>
