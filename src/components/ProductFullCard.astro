---
export interface Props {
  product: {
    id: string | number;
    name: string;
    description?: string;
    image_url_full: string;
    image_url_ref: string;
    [key: string]: any;
  };
}
const { product } = Astro.props;
if (!product || typeof product !== 'object') return null;

const imageUrl = product.image_url_full || product.image_url_ref || '/images/placeholder.png';
const modalId = `modal-${product.id}`;

const productDataForScript = {
  id: product.id,
  name: product.name,
  image_url_ref: product.image_url_ref
};
---

<dialog id={modalId} class="product-modal">
  <div class="modal-content">
    <button class="close-modal" aria-label="Cerrar" onclick={`document.getElementById('${modalId}').close()`}>Ã—</button>

    <img src={imageUrl} alt={product.name} class="modal-image" loading="lazy" />
    <h2>{product.name}</h2>
    {product.description && <p class="description">{product.description}</p>}

    <button class="add-to-cart-btn" type="button">
      AÃ±adir al carrito ðŸ›’
    </button>
  </div>

  <script define:vars={{ modalId, productData: productDataForScript }}>
    const dialog = document.getElementById(modalId);
    const addToCartButton = dialog.querySelector('.add-to-cart-btn');

    dialog.addEventListener('click', (event) => {
      if (event.target === dialog) dialog.close();
    });

    dialog.addEventListener('close', () => {
        if (addToCartButton) {
            addToCartButton.textContent = 'AÃ±adir al carrito ðŸ›’';
            addToCartButton.disabled = false;
        }
    });

    if (addToCartButton) {
      addToCartButton.addEventListener('click', () => {
        const productToAdd = productData;
        if (!productToAdd || !productToAdd.id) return;

        let cart = [];
        try { cart = JSON.parse(localStorage.getItem('cart')) || []; } catch(e) {}
        if (!Array.isArray(cart)) cart = [];

        const existingIndex = cart.findIndex(item => item.id == productToAdd.id);
        if (existingIndex > -1) {
          cart[existingIndex].quantity = (cart[existingIndex].quantity || 0) + 1;
        } else {
          cart.push({ ...productToAdd, quantity: 1 });
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        document.dispatchEvent(new CustomEvent('cartUpdated'));

        addToCartButton.textContent = 'âœ… Agregado';
        addToCartButton.disabled = true;

        setTimeout(() => { dialog.close(); }, 1000);
      });
    }
  </script>
</dialog>

<style>
.product-modal { border: none; border-radius: 16px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); padding: 0; max-width: 600px; width: 90%; position: relative; }
.product-modal::backdrop { background: rgba(0, 0, 0, 0.65); backdrop-filter: blur(3px); }
.modal-content { padding: 2rem; text-align: center; }
.modal-image { width: 100%; max-height: 400px; object-fit: contain; border-radius: 12px; margin-bottom: 1rem; }
.close-modal { position: absolute; top: 10px; right: 15px; background: #eee; border: none; border-radius: 50%; width: 36px; height: 36px; font-size: 1.5rem; line-height: 1; color: #555; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: background-color 0.2s, color 0.2s; z-index: 10; }
.close-modal:hover { background-color: #ddd; color: #111; }
h2 { margin-bottom: 0.5rem; color: #333; font-size: 1.5rem; font-weight: 700;}
p.description { color: #555; margin-top: 0; line-height: 1.6; margin-bottom: 1.5rem; }
.add-to-cart-btn { display: inline-block; background: #f0ce0c; color: #333; font-weight: 700; padding: .8rem 1.8rem; border-radius: 50px; border: none; cursor: pointer; transition: background .25s ease, transform 0.2s ease; font-size: 1rem; width: 100%; max-width: 300px; margin-top: 1rem; }
.add-to-cart-btn:hover { background: #e3bd00; transform: scale(1.03); }
.add-to-cart-btn:disabled { background-color: #4caf50; color: white; cursor: not-allowed; transform: none; }
</style>
